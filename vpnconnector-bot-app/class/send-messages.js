const { Markup } = require('telegraf');
const axios = require('axios');
require('dotenv').config();

class SendMessages {
    constructor(bot, dbRequests, attributes) {
        this._bot = bot;
        this._dbRequests = dbRequests;
        this._attributes = attributes;
        this._axios = axios;
        this._filePath = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}`;
    }

    async sendNotificationsAdministrators(ctx) {
        const action = ctx.session.admin_subscribe ? 'confirm_admin_payment' : 'confirm_service_payment';
        const keyboard = ctx.session.price_type.startsWith('card_price_')
            ? [[Markup.button.callback(
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                JSON.stringify({ action: action, paymentId: ctx.session.payment_id })
            )]]
            : [];

        try {
            await this._bot.telegram.sendMessage(
                ctx.session.notification_chat_id,
                await this.formatMessageNewUser(ctx),
                {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                }
            );
        } catch (error) {
            await this._bot.telegram.sendMessage(
                process.env.BOT_OWNER_ID,
                await this.formatMessageNewUser(ctx),
                {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                }
            );
        }

        if (
            (ctx.session.step == 'confirm_payment_transfer' || ctx.session.step == 'confirm_admin_payment_transfer')
            && ctx.session.confirm_payment_transfer
        ) {
            const messageConfirmPayment = ctx.session.confirm_payment_transfer_message;
            const messageId = messageConfirmPayment.message_id; // ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
            const chatId = messageConfirmPayment.chat.id; // ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞

            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await ctx.forwardMessage(ctx.session.notification_chat_id, chatId, messageId);
            } catch (error) {
                await ctx.forwardMessage(process.env.BOT_OWNER_ID, chatId, messageId)
                    .catch((err) => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                    });
            }
        }

        ctx.session = null;
    }

    async formatMessageNewUser(ctx) {
        let phone = await this._attributes.formatPhoneNumber(ctx.session.phone);
        phone = phone
            ? `<a href="tel:${phone}">${phone}</a>`
            : ctx.session.phone;
        let text = '‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ VPN!</b>\n\n';
        text += `<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @${ctx.session.username}\n`;
        text += `<b>–ò–º—è:</b> ${ctx.session.name}\n`;
        text += `<b>–§–∞–º–∏–ª–∏—è:</b> ${ctx.session.surname}\n`;
        text += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}\n`;
        text += `–û–ø–ª–∞—Ç–∞ <b>${ctx.session.price}${ctx.session.currency}</b>\n`;

        text += `\nüü¢ #–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`;

        return text;
    }

    async sendNotificationsAdministratorsFromUserRegistrationRequest(ctx) {
        try {
            await this._bot.telegram.sendMessage(
                ctx.session.notification_chat_id,
                await this.formatMessageUserRegistrationRequest(ctx),
                { parse_mode: 'HTML' }
            );
        } catch (error) {
            await this._bot.telegram.sendMessage(
                process.env.BOT_OWNER_ID,
                await this.formatMessageUserRegistrationRequest(ctx),
                { parse_mode: 'HTML' }
            );
        }
    }

    async formatMessageUserRegistrationRequest(ctx) {
        let phone = await this._attributes.formatPhoneNumber(ctx.session.phone);
        phone = phone
            ? `<a href="tel:${phone}">${phone}</a>`
            : ctx.session.phone;
        let text = 'üü† <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ VPN, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª!</b>\n\n';
        text += `<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @${ctx.session.username}\n`;
        text += `<b>–ò–º—è:</b> ${ctx.session.name}\n`;
        text += `<b>–§–∞–º–∏–ª–∏—è:</b> ${ctx.session.surname}\n`;
        text += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}\n`;
        text += `–û–ø–ª–∞—Ç–∞ <b>${ctx.session.price}${ctx.session.currency}</b>\n`;

        text += `\nüü† #–ù–µ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`;

        return text;
    }

    async sendMessageAboutChat(chat, chatMeta, admin, ctx) {
        const userTgId = ctx.update?.message?.from.id
            ?? ctx.update?.my_chat_member?.from.id
            ?? ctx.update?.callback_query?.from.id;
        const adminTgId = admin?.user?.id ?? admin.user_tg_id;
        const card_price_1 = chatMeta ? await chatMeta.find(meta => meta.meta_key == 'card_price_1')?.meta_value : 0;
        const card_price_6 = chatMeta ? await chatMeta.find(meta => meta.meta_key == 'card_price_6')?.meta_value : 0;
        const card_price_12 = chatMeta ? await chatMeta.find(meta => meta.meta_key == 'card_price_12')?.meta_value : 0;
        const star_price_1 = chatMeta ? await chatMeta.find(meta => meta.meta_key == 'star_price_1')?.meta_value : 0;
        const star_price_6 = chatMeta ? await chatMeta.find(meta => meta.meta_key == 'star_price_6')?.meta_value : 0;
        const star_price_12 = chatMeta ? await chatMeta.find(meta => meta.meta_key == 'star_price_12')?.meta_value : 0;
        let chatInfo = null;
        try {
            chatInfo = await this._bot.telegram.getChat(chat.chat_tg_id);
        } catch (error) {
            return await ctx.telegram.sendMessage(
                userTgId,
                `üî¥ <b>–ß–∞—Ç/–ö–∞–Ω–∞–ª —Å–µ—Ä–≤–∏—Å–∞ VPN –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>`
                + `<blockquote>–í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ß–∞—Ç–∞/–ö–∞–Ω–∞–ª–∞!</blockquote>`,
                { parse_mode: 'HTML' }
            );
        }
        const title = chatInfo?.title ? `üî∞ <b>${chatInfo.title}</b>` : '';
        const description = chatInfo?.description ? `\n<blockquote>${chatInfo.description}</blockquote>` : '';
        let price = '';
        price += card_price_1 ? `\n<blockquote>–ó–∞ 1 –º–µ—Å—è—Ü: <b>${card_price_1}‚ÇΩ</b></blockquote>` : '';
        price += card_price_6 ? `\n<blockquote>–ó–∞ 6 –º–µ—Å—è—Ü–µ–≤: <b>${card_price_6}‚ÇΩ</b></blockquote>` : '';
        price += card_price_12 ? `\n<blockquote>–ó–∞ 12 –º–µ—Å—è—Ü–µ–≤: <b>${card_price_12}‚ÇΩ</b></blockquote>` : '';
        price += star_price_1 ? `\n<blockquote>–ó–∞ 1 –º–µ—Å—è—Ü: <b>${star_price_1}‚≠êÔ∏è</b></blockquote>` : '';
        price += star_price_6 ? `\n<blockquote>–ó–∞ 6 –º–µ—Å—è—Ü–µ–≤: <b>${star_price_6}‚≠êÔ∏è</b></blockquote>` : '';
        price += star_price_12 ? `\n<blockquote>–ó–∞ 12 –º–µ—Å—è—Ü–µ–≤: <b>${star_price_12}‚≠êÔ∏è</b></blockquote>` : '';
        price = price.length > 0 ? `\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b>${price}` : '';
        const message = `${title}${description}${price}`;

        const keyboard = [];

        if (price.length > 0) {
            keyboard.push([Markup.button.callback('–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN', JSON.stringify({ action: 'subscribe_service', chatId: chat.id }))]);
        }
        if (userTgId == adminTgId) {
            keyboard.push([Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', JSON.stringify({ action: 'settings_up', chatId: chat.id }))]);
        }
        if (chatInfo.photo) {
            const fileId = chatInfo.photo.big_file_id;
            const file = await this._bot.telegram.getFile(fileId);
            const filePath = file.file_path;

            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º axios
            const response = await this._axios.get(
                `${this._filePath}/${filePath}`,
                { responseType: 'stream' }
            );

            await ctx.telegram.sendPhoto(
                userTgId,
                { source: response.data },
                {
                    caption: message,
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                },
            );
        } else {
            await ctx.telegram.sendMessage(
                userTgId,
                message,
                {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                }
            );
        }
    }

    async sendMessageMySubscribeChat(chat, userTgId, admin, ctx) {
        let chatInfo = null;
        try {
            chatInfo = await this._bot.telegram.getChat(chat.chat_tg_id);
        } catch (error) {
            return await ctx.telegram.sendMessage(
                userTgId,
                `üî¥ <b>–ß–∞—Ç/–ö–∞–Ω–∞–ª —Å–µ—Ä–≤–∏—Å–∞ VPN –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>`
                + `<blockquote>–í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ß–∞—Ç–∞/–ö–∞–Ω–∞–ª–∞!</blockquote>`,
                { parse_mode: 'HTML' }
            );
        }
        const title = chatInfo?.title ? `üî∞ <b>${chatInfo.title}</b>` : '';
        const description = chatInfo?.description ? `\n<blockquote>${chatInfo.description}</blockquote>` : '';
        let statusSubsecibe = `\n<blockquote>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ <b>${chat.billing_date_to}</b></blockquote>`;
        const message = `${title}${description}${statusSubsecibe}`;

        const keyboard = [];
        keyboard.push([Markup.button.callback('–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', JSON.stringify({ action: 'update_subscribe', chatId: chat.chat_id }))]);

        if (chatInfo.photo) {
            const fileId = chatInfo.photo.big_file_id;
            const file = await this._bot.telegram.getFile(fileId);
            const filePath = file.file_path;

            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º axios
            const response = await this._axios.get(
                `${this._filePath}/${filePath}`,
                { responseType: 'stream' }
            );

            await ctx.telegram.sendPhoto(
                userTgId,
                { source: response.data },
                {
                    caption: message,
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                },
            );
        } else {
            await ctx.telegram.sendMessage(
                userTgId,
                message,
                {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                }
            );
        }
    }
}

module.exports = { SendMessages }