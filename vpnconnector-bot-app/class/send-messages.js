const { Markup } = require('telegraf');
const axios = require('axios');
require('dotenv').config();

class SendMessages {
    constructor(bot, dbRequests, attributes) {
        this._bot = bot;
        this._dbRequests = dbRequests;
        this._attributes = attributes;
        this._axios = axios;
        this._filePath = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}`;
    }

    async sendNotificationsAdministrators(ctx) {
        const action = ctx.session.admin_subscribe ? 'confirm_admin_payment' : 'confirm_service_payment';
        const keyboard = ctx.session.price_type.startsWith('card_price_') || ctx.session.price_type.startsWith('crypto_price_')
            ? [[Markup.button.callback(
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                JSON.stringify({ action: action, paymentId: ctx.session.payment_id })
            )]]
            : [];

        try {
            await this._bot.telegram.sendMessage(
                ctx.session.notification_chat_id,
                await this.formatMessageNewUser(ctx),
                {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                }
            );
        } catch (error) {
            await this._bot.telegram.sendMessage(
                process.env.BOT_OWNER_ID,
                await this.formatMessageNewUser(ctx),
                {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                }
            );
        }

        if (
            (ctx.session.step == 'confirm_payment_transfer' || ctx.session.step == 'confirm_admin_payment_transfer')
            && ctx.session.confirm_payment_transfer
        ) {
            const messageConfirmPayment = ctx.session.confirm_payment_transfer_message;
            const messageId = messageConfirmPayment.message_id; // ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
            const chatId = messageConfirmPayment.chat.id; // ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞

            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await ctx.forwardMessage(ctx.session.notification_chat_id, chatId, messageId);
            } catch (error) {
                await ctx.forwardMessage(process.env.BOT_OWNER_ID, chatId, messageId)
                    .catch((err) => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                    });
            }
        }

        ctx.session = null;
    }

    async formatMessageNewUser(ctx) {
        let phone = await this._attributes.formatPhoneNumber(ctx.session.phone);
        phone = phone
            ? `<a href="tel:${phone}">${phone}</a>`
            : ctx.session.phone;
        let text = '‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ VPN!</b>\n\n';
        text += `<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @${ctx.session.username}\n`;
        text += `<b>–ò–º—è:</b> ${ctx.session.name}\n`;
        text += `<b>–§–∞–º–∏–ª–∏—è:</b> ${ctx.session.surname}\n`;
        text += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}\n`;
        text += `–û–ø–ª–∞—Ç–∞ <b>${ctx.session.price} ${ctx.session.currency}</b>\n`;

        if (ctx.session.price_type.startsWith('card_price_')) {
            text += `\nüîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ - –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç, —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –≤–∞–º!\n`;    
        }

        if (ctx.session.price_type.startsWith('crypto_price_')) {
            text += `\nüîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É - –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–µ–≤—Ä–∂–¥–µ–Ω–∏—è –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n`;    
        }

        text += `\nüü¢ #–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`;

        return text;
    }

    async sendNotificationsAdministratorsFromUserRegistrationRequest(ctx) {
        try {
            await this._bot.telegram.sendMessage(
                ctx.session.notification_chat_id,
                await this.formatMessageUserRegistrationRequest(ctx),
                { parse_mode: 'HTML' }
            );
        } catch (error) {
            await this._bot.telegram.sendMessage(
                process.env.BOT_OWNER_ID,
                await this.formatMessageUserRegistrationRequest(ctx),
                { parse_mode: 'HTML' }
            );
        }
    }

    async formatMessageUserRegistrationRequest(ctx) {
        let phone = await this._attributes.formatPhoneNumber(ctx.session.phone);
        phone = phone
            ? `<a href="tel:${phone}">${phone}</a>`
            : ctx.session.phone;
        let text = 'üü† <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ VPN, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª!</b>\n\n';
        text += `<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @${ctx.session.username}\n`;
        text += `<b>–ò–º—è:</b> ${ctx.session.name}\n`;
        text += `<b>–§–∞–º–∏–ª–∏—è:</b> ${ctx.session.surname}\n`;
        text += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}\n`;
        text += `–û–ø–ª–∞—Ç–∞ <b>${ctx.session.price} ${ctx.session.currency}</b>\n`;

        text += `\nüü† #–ù–µ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`;

        return text;
    }

    async getPriceService(serviceId) {
        let price = '';
        const serviceMeta = await this._dbRequests.getServiceMeta(serviceId);
        if (serviceMeta) {
            const payment_type_card = await serviceMeta.find(meta => meta.meta_key == 'payment_type_card')?.meta_value;
            const payment_type_star = await serviceMeta.find(meta => meta.meta_key == 'payment_type_star')?.meta_value;
            const payment_type_crypto = await serviceMeta.find(meta => meta.meta_key == 'payment_type_crypto')?.meta_value;
            const crypto_currency = await serviceMeta.find(meta => meta.meta_key == 'crypto_currency')?.meta_value;
            const card_price_1 = await serviceMeta.find(meta => meta.meta_key == 'card_price_1')?.meta_value;
            const card_price_6 = await serviceMeta.find(meta => meta.meta_key == 'card_price_6')?.meta_value;
            const card_price_12 = await serviceMeta.find(meta => meta.meta_key == 'card_price_12')?.meta_value;
            const star_price_1 = await serviceMeta.find(meta => meta.meta_key == 'star_price_1')?.meta_value;
            const star_price_6 = await serviceMeta.find(meta => meta.meta_key == 'star_price_6')?.meta_value;
            const star_price_12 = await serviceMeta.find(meta => meta.meta_key == 'star_price_12')?.meta_value;
            const crypto_price_1 = await serviceMeta.find(meta => meta.meta_key == 'crypto_price_1')?.meta_value;
            const crypto_price_6 = await serviceMeta.find(meta => meta.meta_key == 'crypto_price_6')?.meta_value;
            const crypto_price_12 = await serviceMeta.find(meta => meta.meta_key == 'crypto_price_12')?.meta_value;
            if (+payment_type_card) {
                price += `\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É:`;
                price += card_price_1 ? `\nüî∞ –ó–∞ 1 –º–µ—Å—è—Ü: ${card_price_1}‚ÇΩ` : '';
                price += card_price_6 ? `\nüî∞ –ó–∞ 6 –º–µ—Å—è—Ü–µ–≤: ${card_price_6}‚ÇΩ` : '';
                price += card_price_12 ? `\nüî∞ –ó–∞ 12 –º–µ—Å—è—Ü–µ–≤: ${card_price_12}‚ÇΩ` : '';
            }
            if (+payment_type_star) {
                price += `\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ - –∑–≤–µ–∑–¥–∞–º–∏ Telegram:`;
                price += star_price_1 ? `\nüî∞ –ó–∞ 1 –º–µ—Å—è—Ü: ${star_price_1}‚≠êÔ∏è` : '';
                price += star_price_6 ? `\nüî∞ –ó–∞ 6 –º–µ—Å—è—Ü–µ–≤: ${star_price_6}‚≠êÔ∏è` : '';
                price += star_price_12 ? `\nüî∞ –ó–∞ 12 –º–µ—Å—è—Ü–µ–≤: ${star_price_12}‚≠êÔ∏è` : '';
            }
            if (+payment_type_crypto) {
                price += `\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ - –∫—Ä–∏–ø—Ç–æ –≤–∞–ª—é—Ç–æ–π ${crypto_currency}:`;
                price += crypto_price_1 ? `\nüî∞ –ó–∞ 1 –º–µ—Å—è—Ü: ${crypto_price_1} ${crypto_currency}` : '';
                price += crypto_price_6 ? `\nüî∞ –ó–∞ 6 –º–µ—Å—è—Ü–µ–≤: ${crypto_price_6} ${crypto_currency}` : '';
                price += crypto_price_12 ? `\nüî∞ –ó–∞ 12 –º–µ—Å—è—Ü–µ–≤: ${crypto_price_12} ${crypto_currency}` : '';
            }
        }
        return price;
    }

    async sendMessageAboutService(service, ctx) {
        const userTgId = ctx.update?.message?.from.id
            ?? ctx.update?.my_chat_member?.from.id
            ?? ctx.update?.callback_query?.from.id;
        const adminTgId = process.env.BOT_OWNER_ID;
        const entities = service.raw?.caption_entities ?? service.raw?.entities ?? [];
        const sourceText = service.raw?.caption ?? service.raw?.text ?? '';
        const keyboard = [];
        let price = await this.getPriceService(service.id);
        if (price.length > 0) {
            keyboard.push(
                [Markup.button.callback('–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN', JSON.stringify({ action: 'subscribe_service', serviceId: service.id }))]
            );
        }
        if (userTgId == adminTgId) {
            keyboard.push(
                [Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', JSON.stringify({ action: 'settings_up', serviceId: service.id }))]
            );
            keyboard.push(
                [Markup.button.callback('üìã –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞', JSON.stringify({ action: 'edit_service_vpn', serviceId: service.id }))]
            );
        }

        price = price.length > 0 ? `\n\n${price}` : '\n\nüî¥ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏!'
        const message = `${sourceText}${price}`;
        try {
            const fileId = service.raw.video?.file_id ?? service.raw.photo?.pop().file_id ?? null;
            if (service.raw.photo) {
                await this._bot.telegram.sendPhoto(
                    userTgId,
                    fileId,
                    {
                        caption: message,
                        caption_entities: entities,
                        disable_web_page_preview: true,
                        ...Markup.inlineKeyboard(keyboard)
                    }
                );
            }
            if (service.raw.video) {
                await this._bot.telegram.sendVideo(
                    userTgId,
                    fileId,
                    {
                        caption: message,
                        caption_entities: entities,
                        disable_web_page_preview: true,
                        ...Markup.inlineKeyboard(keyboard)
                    }
                );
            }
            if (!service.raw.photo && !service.raw.video) {
                await this._bot.telegram.sendMessage(
                    userTgId,
                    message,
                    {
                        entities: entities,
                        disable_web_page_preview: true,
                        ...Markup.inlineKeyboard(keyboard)
                    }
                );
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: ${adminTgId}`, error);
        }
    }
}

module.exports = { SendMessages }